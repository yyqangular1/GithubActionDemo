name: crm-demo-nacos
run-name: crm-demo-nacos

  
# Controls when the workflow will run
# define trigger event
on: 
  workflow_dispatch

jobs:
  getNacosToken:
    runs-on: [ self-hosted ]
    name: get access token from nacos
    steps:
      - name: get access token from nacos
        id: get_nacos_token
        run: |
          echo `pwd`
          # get token
          RESPONSE=$( curl -X POST 'http://101.133.164.217:8848/nacos/v1/auth/login' -d 'username=nacos&password=so-fast(Nttdata)' )
          # parse token
          token=$(echo "$RESPONSE" | jq -r '.accessToken')
          # set github env
          echo "parse_token=$token" >> $GITHUB_ENV
      
      - name: get microservice status
        id: instance_response
        run: |
          echo "Get instance list"
          # get instance list
          INSTANCE_LIST=$( curl -X GET "http://101.133.164.217:8848/nacos/v1/ns/instance/list?serviceName=so-fast-admin&groupName=SO_FAST_GROUP&accessToken=$parse_token")
          echo "instance list: $INSTANCE_LIST"
          
          # get all instance ip
          ips=$(echo "$INSTANCE_LIST" | jq -r '.hosts[].ip')
          echo "ips=$(echo $ips | tr '\n' ' ')" >> $GITHUB_OUTPUT

          # get service name
          serviceName=$(echo "$INSTANCE_LIST" | jq -r '.hosts[0].serviceName')
          echo "serviceName=$serviceName" >> $GITHUB_OUTPUT

          # get clusterName
          clusterName=$(echo "$INSTANCE_LIST" | jq -r '.hosts[0].clusterName')
          echo "clusterName=$clusterName" >> $GITHUB_OUTPUT

          # get port
          port=$(echo "$INSTANCE_LIST" | jq -r '.hosts[0].port')
          echo "port=$port" >> $GITHUB_OUTPUT

      - name: Offline microservice  
        run: |
          echo "Offline microservice"
          echo "serviceName: ${{ steps.instance_response.outputs.serviceName }}"
          echo "clusterName: ${{ steps.instance_response.outputs.clusterName }}"
          echo "port: ${{ steps.instance_response.outputs.port }}"
          
          ##
          #namespaceId=

          ips="${{ steps.instance_response.outputs.ips }}"
          IFS=' ' read -r -a ips_array <<< "$ips"
          
          ## get array length
          #length=${#ips_array[@]}
          
          for ip in "${ips_array[@]}"; do
            echo "Processing: $ip"
            # 在这里执行你需要的操作
            offlineStatus=$( curl -X PUT "http://101.133.164.217:8848/nacos/v1/ns/instance?accessToken=$parse_token" -d 'serviceName=$serviceName&clusterName=$clusterName&groupName=SO_FAST_GROUP&ip=$ip&port=$port&namespaceId=$namespaceId&enabled=false')
            if [[ "$offlineStatus" == "OK" ]]; then
              echo "offline success"
            fi
          done

          
          
          ##

